---
title: "Time Series Visualisation"
subtitle: ""
author: "Dr. Thiyanga S. Talagala <br/>  Department of Statistics, Faculty of Applied Sciences <br/> University of Sri Jayewardenepura, Sri Lanka"
format:
  revealjs:
    width: 2000
    height: 1000
    margin: 0.1
    theme: [simple, custom.scss]
    transition: slide
    background-transition: fade
    slide-number: true
    show-slide-number: all
    title-slide-attributes: 
      data-background-color: "#800026"
      data-background-image: none
---

```{css, echo=FALSE}
.reveal code {
  max-height: 100% !important;
}
```

## Packages

```{r, message=FALSE, warning=FALSE, echo=TRUE}
library(tidyverse)
library(tsibble)
library(lubridate)
library(feasts)
library(denguedatahub)
# install.packages("devtools")
#devtools::install_github("thiyangt/TourSriLanka")
library(TourSriLanka)
```

# Store time series data with tsibble

------------------------------------------------------------------------

::: columns
::: {.column width="50%"}
### tibble

```{r, echo=TRUE}
y.tibble <- tibble(
  Year = 2020:2023,
  Earnings = c(682.4, 506.9, 1136.3, 2068.0))
y.tibble
```
:::

::: {.column width="50%"}
### tsibble

```{r, echo=TRUE}
y.tsibble <- tsibble(
  Year = 2020:2023,
  Earnings = c(682.4, 506.9, 1136.3, 2068.0),
  index = Year)
y.tsibble
```
:::
:::

## Convert tibble to tsibble

```{r, echo=TRUE}
y.tibble |> as_tsibble(index=Year)
```

## Your turn

Extract `dengue.cases.indigenous` from `china_annual_data` and convert it into tsibble.

```{r}
#| echo: true
#| style: "font-size: 30px;"
library(denguedatahub)
china_annual_data
```

## Monthly data

```{r}
#| echo: true
#| style: "font-size: 50px;"
library(TourSriLanka)
data(earnings)
earnings
```

## Sort data according to the year

```{r}
#| echo: true
#| style: "font-size: 50px;"
earnings <- earnings |>
  arrange(Year, match(Month, month.name) )
earnings
```

## Create sequence of dates using lubridate package

```{r}
#| echo: true
#| style: "font-size: 50px;"
library(lubridate)
seq(ymd("2009-1-1"), ymd("2023-1-1"), by = "years")
```

## 

```{r}
#| echo: true
#| style: "font-size: 50px;"
seq(ymd("2009-1-1"), ymd("2023-1-1"), by = "month")
```

## 

```{r}
#| echo: true
#| style: "font-size: 50px;"
seq(ymd("2009-1-1"), ymd("2023-1-1"), by = "quarter")
```

## 

```{r}
#| echo: true
#| style: "font-size: 50px;"
seq(ymd("2009-1-1"), ymd("2023-1-1"), by = "1 week")
```

## 

```{r}
#| echo: true
#| style: "font-size: 50px;"
seq(ymd("2009-1-1"), ymd("2023-1-1"), by = "2 week")
```

## 

```{r}
#| echo: true
#| style: "font-size: 50px;"
seq(ymd("2009-1-1"), ymd("2023-1-1"), by = "2 months")
```

## 

```{r}
#| echo: true
#| style: "font-size: 50px;"
seq(ymd("2009-1-1"), ymd("2023-1-1"), by = "1 day")
```

## 

```{r}
#| echo: true
#| style: "font-size: 50px;"
seq(ymd_hm("2015-1-1 0:00"), ymd_hm("2015-1-1 12:00"), by = "hour")
```

## `TourSriLanka`

```{r}
#| echo: true
#| style: "font-size: 50px;"
y.earnings <- earnings |> mutate(Date = seq(ymd_hm("2009-1-1 0:00"), ymd_hm("2023-12-1 12:00"), by = "month"))
y.earnings
```

## Create year-month column

```{r}
#| echo: true
#| style: "font-size: 50px;"
y.earnings <- y.earnings |>
  select(Earnings, Date) |> mutate(Time = yearmonth(Date))
y.earnings
```

## Convert `TourSriLanka` to tsibble

```{r}
#| echo: true
#| style: "font-size: 50px;"
ts.earnings <- y.earnings |>
  select(Earnings, Time) |> as_tsibble(index=Time)
ts.earnings
```

## Other time class functions

1.  Quarterly: yearquarter()

2.  Weekly: yearweek()

Your turn: Find about other time class functions.

Help: <https://otexts.com/fpp3/tsibbles.html>

# Data Visualisation

## Method 1

```{r}
#| echo: true
#| style: "font-size: 20px;"
ggts <- ts.earnings |>
  ggplot(aes(x = Time, y = Earnings)) +
  geom_line() +
  labs(y = "Earnings from tourism (USD Mn)", x="Time")  
ggts
```

## Method 2

```{r}
#| echo: true
#| style: "font-size: 20px;"
library(feasts)
ts.earnings |>
  autoplot(Earnings) +
  labs(y = "Earnings from tourism (USD Mn)", x="Time") 
```

## Customize Y axis

```{r}
#| echo: true
#| style: "font-size: 20px;"
ts.earnings |>
    mutate(Time = as_date(yearmonth(Time))) |>
  ggplot(aes(x = Time, y = Earnings)) +
  geom_line() +
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") + 
  labs(y = "Earnings from tourism (USD Mn)", x="Time") 
```

## Customize Y axis (cont.)

```{r}
#| echo: true
#| style: "font-size: 20px;"
ts.earnings |>
    mutate(Time = as_date(yearmonth(Time))) |>
  ggplot(aes(x = Time, y = Earnings)) +
  geom_line() +
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  labs(y = "Earnings from tourism (USD Mn)", x="Time") 
```

## Customize Y axis (cont.)

```{r}
#| echo: true
#| style: "font-size: 20px;"
ts.earnings |>
    mutate(Time = as_date(yearmonth(Time))) |>
  ggplot(aes(x = Time, y = Earnings)) +
  geom_line() +
  scale_x_date(date_breaks = "6 months", date_labels = "%b-%y") + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  labs(y = "Earnings from tourism (USD Mn)", x="Time") 
```

## Add geom_point

```{r}
#| echo: true
#| style: "font-size: 20px;"
ts.earnings |>
    mutate(Time = as_date(yearmonth(Time))) |>
  ggplot(aes(x = Time, y = Earnings)) +
  geom_line() +
  geom_point() + 
  scale_x_date(date_breaks = "1 year") + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  labs(y = "Earnings from tourism (USD Mn)", x="Time") 
```

## Add geom_point: using autoplot

```{r}
#| echo: true
#| style: "font-size: 20px;"
ts.earnings |>
    mutate(Time = as_date(yearmonth(Time))) |>
  autoplot(Earnings) + 
  geom_point() + 
  scale_x_date(date_breaks = "1 year") + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  labs(y = "Earnings from tourism (USD Mn)", x="Time") 
```

## Change label format

```{r}
#| echo: true
#| style: "font-size: 20px;"
ts.earnings |>
    mutate(Time = as_date(yearmonth(Time))) |>
  autoplot(Earnings) + 
  geom_point() + 
  scale_x_date(date_breaks = "1 year",  date_labels = "%b-%y") + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  labs(y = "Earnings from tourism (USD Mn)", x="Time") 
```

## Seasonal plot

```{r}
#| echo: true
library(viridis)
ts.earnings |>
  gg_season(Earnings, period = "1 year")  
  
```

## Change colour

```{r}
#| echo: true
library(viridis)
ts.earnings |>
  gg_season(Earnings, period = "1 year",  pal = scales::viridis_pal()(15))  
  
```

## Add points

```{r}
#| echo: true
library(viridis)
ts.earnings |>
  gg_season(Earnings, period = "1 year",  pal = scales::viridis_pal()(15))  + geom_point() 
  
```

## Your turn

Obtain this graph using `ggplot2` functions.

```{r}
ts.earnings |>
  gg_season(Earnings, period = "1 year",  pal = scales::viridis_pal()(15))  + geom_point() 
  
```

## Seasonal sub series plot

```{r}
#| echo: true
ts.earnings |>
  gg_subseries(Earnings)  + geom_point() 
  
```

## Your turn

Obtain the graph using `ggplot2` functions.


```{r}
ts.earnings |>
  gg_subseries(Earnings)  + geom_point() 
  
```

## Lag plots

:::: {.columns}

::: {.column width="50%"}

```{r}
#| eval: FALSE
#| echo: TRUE
ts.earnings |>
gg_lag(Earnings, geom = "point") +
  labs(x = "lag(Earnings)")
  
```

:::
  
::: {.column width="50%"}

```{r, fig.height=10, fig.width=10}
ts.earnings |>
gg_lag(Earnings, geom = "point") +
  labs(x = "lag(Earnings)")
  
```


:::
  

  
::::

# Multiple time series

## Data set

```{r}
#| style: "font-size: 20px;"
library(denguedatahub)
china_annual_data  
```

## Pre-processing data

```{r}
cts <- china_annual_data  |>
pivot_longer(
cols = 2:5,
names_to = "Type",
values_to = "Counts")
cts
```

## Converting to tsibble

```{r}
#| echo: true
#| style: "font-size: 40px;"
cts.tsibble <- cts |>
as_tsibble(index=year, key=Type)
cts.tsibble
```

## Multiple time series plot


```{r}
#| echo: true
cts.tsibble |>
autoplot(Counts) 
```


## Your turn

1. Customize X-axis

2. Draw the plot using `ggplot2` functions.

```{r}
  #| echo: true
#| style: "font-size: 40px;"
cts.tsibble |>
autoplot(Counts) 
```

## Faceting

```{r}
#| echo: true
#| style: "font-size: 40px;"
cts.tsibble |>
autoplot(Counts) + facet_wrap(vars(Type), )
```

## Free scales

```{r}
#| echo: true
#| style: "font-size: 40px;"
cts.tsibble |>
autoplot(Counts) + facet_wrap(vars(Type), scales="free")
```

## Legend position

```{r}
#| echo: true
#| style: "font-size: 40px;"
cts.tsibble |>
autoplot(Counts) + facet_wrap(vars(Type), scales="free") + theme(legend.position = "bottom")
```

Your turn: Improve the graph by customizing the axis labels and tick marks.